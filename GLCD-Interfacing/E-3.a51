;P1->D0-D7
;P2.0->RS (Reg. Select)
;P2.1->R/W'
;P2.2->E
;P2.3->RST (RESET)
;P2.4->CS1
;P2.5->CS2

;the following are steps that we'll follow:
;1. Initialize GLCD
;2. Select GLCD Half
;3. Select Page
;4. Display Text

;following changes have been made in the code to make the display faster
;check busy flag method has been introduced which checks the busy flag of GLCD in read mode and waits for appropriate
;time to give it next set of instructions this helps as we now no longer has to use fixed delay method

;the following is the change in procedure for checking the busy flag which is slightly different compared to standard
;charcter LCD's which is:
;here a high to low pulse is given to enable
;instead of a low to high pulse for conventional displays rest of the code remains the same
;also standard delay subroutine is reduced to 1ms to be more faster
;and pulse duration for high to low transition is also reduced to 1 microsecond instead of 20ms that was used earlier

org 0000h
	
	setb p2.3 ;set rest pin to 1 i.e. inactive mode
	
	acall delay ;some delay is introduced purposefully
	acall delay
	acall delay
	acall delay
	acall delay
	acall delay
	
	mov a,#3fh
	acall display_img
	
	here: sjmp here
	
	org 200h ;all new glcd subroutines starts from here
		
		cmdwrt:
		acall check_busy_flag; wait till lcd is ready to accept new instruction
		mov p1,a ;move command in accumulator to p1
		
		clr p2.0 ;select command register (rs-pin)
		
		clr p2.1 ;set lcd to write mode (r/w'-pin)
		setb p2.2 ;set enable signal (e-pin)
		acall delay ;call delay subroutine
		clr p2.2 ;give a high to low pulse
		
		ret ;for cmdwrt
		
		datawrt:
		acall check_busy_flag; wait till lcd is ready to accept new instruction
		mov p1,a ;move data in accumulator to p1
		
		setb p2.0 ;select data register (rs-pin)
		
		clr p2.1 ;set lcd to write mode (r/w'-pin)
		setb p2.2 ;set enable signal (e-pin)
		acall delay ;call delay subroutine
		clr p2.2 ;give a high to low pulse
		
		ret ;for datawrt
		
		check_busy_flag: ;subroutine that checks the status of busy flag based on above mentioned conditions
		clr p2.0 ; clr rs
		setb p2.1 ;set r/w to 1 for reading from LCD
		back:setb p2.2 ;set enable for high to low pulse to be given
		nop	; delay to generate a low pulse
		clr p2.2 ; clr enable so that busy flag is now made availabe for reading at D7 of lcd

		jb p1.7,back ; check
		ret ;for check busy flag
		
		delay:;1ms delay assuming clk freq 12MHz
		mov r3,#2
		here2:mov r4,#255
		here1:djnz r4,here1
		djnz r3,here2
		ret ;for delay
		
		display_img:
		mov dptr,#hpbmp
		mov r0,#00h ;page counter
		mov r5,#8d
		
		loop2:mov a,r0
		acall set_pg
		
		mov a,#00h
		acall set_column
		
		mov r2,#64d
		inc r0
		
		loop1:mov a,#00h ;fill all all the columns with light
		movc a,@a+dptr
		acall datawrt
		inc dptr
		djnz r2,loop1
		
		mov a,#64d
		acall set_column
		
		mov r2,#64d
		
		loop3:mov a,#00h ;fill all all the columns with light
		movc a,@a+dptr
		acall datawrt
		inc dptr
		djnz r2,loop3
		
		djnz r5,loop2
		
		ret ;for clear screen
		
		set_column: ;selects a particular column form where to write data for a given selected page
		
		clr c
		mov b,a ;copy a in b for book-keeping
		subb a,#40h ;check if the number in accumulator is greater than 64 in decimal to take decision
		jnc right_half ;jump to right half if number is >=64 in decimal
		
		;logic for selecting on left half of screen
		
		clr p2.4 ;set cs1 to select first half of glcd (actullay inverted logic is used for proteus simulation hence a bit change in these and rst instructions is seen)
		setb p2.5
		
		mov a,b ;reload a with original number
		add a,#40h ;add the number plus the 40h which is command for slecting 0th column in glcd
		
		acall cmdwrt ;call command function to select a particular column
		
		sjmp column_set
		
		right_half: ;logic for right of screen
		
		setb p2.4 ;selecting right half of screen
		clr p2.5
		
		add a,#40h ;since for right half values we'll add to 40h
		
		acall cmdwrt ;call command function to select a particular column
		
		column_set: 
		
		ret ;for set_column
		
		set_pg: ;Selects one of 8 vertical pages, each representing 8 rows of pixels.
		
		clr p2.4 ;enable both displays to set same page on both
		clr p2.5
		
		add a,#0b8h ;add numbers form 0 to 7 to b8h to select any pg out of the available 8 pgs
		acall cmdwrt
		
		ret ;for set_pg
		
		org 500h
			
			hpbmp:
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xD0, 0xC8, 0xEC, 0xF4, 0xFE
			db 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF0
			db 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x10, 0x20, 0x20, 0x60, 0xE2, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFE, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x1F, 0x1E, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xA7, 0xC7, 0xC7, 0xCF, 0xDF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xEF
			db 0xFF, 0xF6, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x01, 0x83, 0xFF, 0x4F, 0x3F
			db 0x37, 0xFF, 0x1F, 0x7F, 0xFF, 0xFF, 0xF7, 0x27, 0x2F, 0x3F, 0x7F, 0xFF, 0xDF, 0xBF, 0x7F, 0xFF
			db 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0xFF, 0x9F, 0xDF, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFE, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x04
			db 0x08, 0x1B, 0x10, 0x80, 0x13, 0x49, 0x01, 0x60, 0x60, 0xF1, 0xF2, 0xE4, 0x75, 0x3E, 0x3E, 0x04
			db 0x0C, 0x8C, 0x6C, 0x0E, 0x0B, 0xF9, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x10, 0x48, 0x8C, 0x0D, 0x7D, 0x7D, 0x7E, 0x7E, 0x7E, 0x7E
			db 0x7E, 0xF6, 0xFE, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xEF, 0xFF, 0xF5, 0xF7, 0xE3, 0xE3, 0xE1
			db 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x04, 0x04, 0x06
			db 0x06, 0x27, 0x27, 0x33, 0x37, 0x2F, 0x9F, 0xCF, 0xCF, 0xEF, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xEF, 0xDF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0
			db 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
			db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF
		
end